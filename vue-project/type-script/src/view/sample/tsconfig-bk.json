{
	"compilerOptions": {
		"incremental": true, /* TS编译器在第一次编译之后会生成一个存储缓存文件，第二次编译会在第一次的基础上，去读取那个缓存文件，从而提高编译效率 */
		"tsBuildInfoFile": "./buildFile", /* 设置增量编译缓存文件的存储位置 */
		"diagnostics": true, /* 打印诊断信息 */
		"target": "es2016" /* 目标语言的版本 */,
		"module": "CommonJS" /* 生成代码的模板标准 */,
		"lib": [
			"DOM",
			"ES2015",
			"ScriptHost",
			"ES2019.Array"
		], /* TS需要引用的库，即声明文件 */
		// "allowJs": true /* 允许编译器编译JS,JSX文件，一般不建议TS和JS混合使用 */,
		// "checkJs": true, /* 允许在JS文件中报错，通常与allowJs一起使用 */
		// "outFile": "", /* 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置"module": */
		"outDir": "./dist", /* 指定输出目录 */
		"rootDir": "./", /* 指定输出文件目录(用于输出)，用于控制输出目录结构 */
		"declaration": true, /* 生成声明文件，开启后会自动生成声明文件 */
		"declarationDir": "", /* 指定生成声明文件的存放目录 */
		"emitDeclarationOnly": true, /* 只生成声明文件，而不会生成js文件 */
		"sourceMap": true /* 生成目标文件的sourceMap文件 */,
		"inlineSourceMap": false, /* 生成目标文件的inlineSource，在JS文件里面内联sourceMap的相关信息 */
		"declarationMap": true, /* 为声明文件生成sourceMap */
		"typeRoots": [], /* 第三方的根目录的声明文件，默认是node_modules/@types */
		"types": [], /* 加载的声明文件包，通常与typeRoots一起使用 */
		"removeComments": true, /* 删除注释 */
		"noEmit": false, /* 不输出文件，即编译后不会生成任何JS文件 */
		"noEmitOnError": true, /* 发生错误时不输出任何文件 */
		"downlevelIteration": true, /* 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现 */
		"strict": true, /* 开启所有严格的类型检查 */
		"alwaysStrict": true, /* 在代码中注入'use strict' */
		"strictNullChecks": true, /* 不允许把null、undefined赋值给其它类型的变量 */
		"strictFunctionTypes": true, /* 不允许函数参数双向协变 */
		"strictPropertyInitialization": true, /* 类的实例属性必须初始化 */
		"strictBindCallApply": true, /* 严格的bind/call/apply检查 */
		"noImplicitAny": true, /* 不允许隐式的any类型 */
		"noImplicitThis": true, /* 不允许this有隐式的any类型 */
		"noUnusedLocals": true, /* 检查只声明、未使用的局部变量(只提示不报错) */
		"noUnusedParameters": true, /* 检查未使用的函数参数(只提示不报错) */
		"noFallthroughCasesInSwitch": true, /* 防止switch语句贯穿(即如果没有break语句，后面就不会执行) */
		"moduleResolution": "node", /* 模块解析策略，ts默认用node的解析策略，即相对的方式导入 */
		"baseUrl": "./", /* 解析非相对模块的基地址，其会使用baseUrl选项作为url路径，默认是当前目录 */
		"jsxFactory": "React.createElement", /* jsx语法要使用什么解析器 */
		"jsx": "preserve", /* preserve会保留原来的jsx文件，而且还创建一个新的js文件；react直接解析成一个js文件 */
		"paths": { /* 路径映射，相对于baseUrl */
			/* 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置 */
			"@jquery": [
				"node_modules/jquery/dist/jquery.min.js"
			],
			"@/*": [
				"./src/*"
			]
		}
	},
	// 指定一个匹配列表(即指定编译的文件夹和文件，属于自动指定该路径下的所有ts相关文件)
	"include": [
		"src/**/*",
		"index.ts"
	],
	// 指定一个排除列表(include的反向操作)
	"exclude": [
		"demo.ts"
	],
	// 指定哪些文件使用该配置，不能指定文件夹(属于手动一个个指定文件)
	"files": [
		"index.ts"
	],
}